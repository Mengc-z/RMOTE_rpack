// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// div_data
Rcpp::List div_data(arma::mat D);
RcppExport SEXP _RSMOTE_div_data(SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(div_data(D));
    return rcpp_result_gen;
END_RCPP
}
// KNN_P
arma::vec KNN_P(arma::mat P, arma::mat D, int k, int type_maj);
RcppExport SEXP _RSMOTE_KNN_P(SEXP PSEXP, SEXP DSEXP, SEXP kSEXP, SEXP type_majSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type P(PSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type type_maj(type_majSEXP);
    rcpp_result_gen = Rcpp::wrap(KNN_P(P, D, k, type_maj));
    return rcpp_result_gen;
END_RCPP
}
// remove_noise
Rcpp::List remove_noise(arma::vec n_maj, int k, arma::mat P);
RcppExport SEXP _RSMOTE_remove_noise(SEXP n_majSEXP, SEXP kSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type n_maj(n_majSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(remove_noise(n_maj, k, P));
    return rcpp_result_gen;
END_RCPP
}
// absolute_density
arma::vec absolute_density(arma::mat P, arma::mat Neigh, int k, bool self);
RcppExport SEXP _RSMOTE_absolute_density(SEXP PSEXP, SEXP NeighSEXP, SEXP kSEXP, SEXP selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type P(PSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Neigh(NeighSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type self(selfSEXP);
    rcpp_result_gen = Rcpp::wrap(absolute_density(P, Neigh, k, self));
    return rcpp_result_gen;
END_RCPP
}
// relative_dentisy
arma::vec relative_dentisy(arma::mat P, arma::mat N, int k);
RcppExport SEXP _RSMOTE_relative_dentisy(SEXP PSEXP, SEXP NSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type P(PSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(relative_dentisy(P, N, k));
    return rcpp_result_gen;
END_RCPP
}
// KNN
arma::mat KNN(arma::mat P, arma::mat D, int k);
RcppExport SEXP _RSMOTE_KNN(SEXP PSEXP, SEXP DSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type P(PSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(KNN(P, D, k));
    return rcpp_result_gen;
END_RCPP
}
// clusterRD
arma::mat clusterRD(arma::mat RD);
RcppExport SEXP _RSMOTE_clusterRD(SEXP RDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type RD(RDSEXP);
    rcpp_result_gen = Rcpp::wrap(clusterRD(RD));
    return rcpp_result_gen;
END_RCPP
}
// over_sampling
Rcpp::List over_sampling(int N, int k, arma::mat& pureP, arma::mat RD_clusters, arma::mat nnarray, arma::mat num_maj);
RcppExport SEXP _RSMOTE_over_sampling(SEXP NSEXP, SEXP kSEXP, SEXP purePSEXP, SEXP RD_clustersSEXP, SEXP nnarraySEXP, SEXP num_majSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type pureP(purePSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RD_clusters(RD_clustersSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type nnarray(nnarraySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type num_maj(num_majSEXP);
    rcpp_result_gen = Rcpp::wrap(over_sampling(N, k, pureP, RD_clusters, nnarray, num_maj));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RSMOTE_div_data", (DL_FUNC) &_RSMOTE_div_data, 1},
    {"_RSMOTE_KNN_P", (DL_FUNC) &_RSMOTE_KNN_P, 4},
    {"_RSMOTE_remove_noise", (DL_FUNC) &_RSMOTE_remove_noise, 3},
    {"_RSMOTE_absolute_density", (DL_FUNC) &_RSMOTE_absolute_density, 4},
    {"_RSMOTE_relative_dentisy", (DL_FUNC) &_RSMOTE_relative_dentisy, 3},
    {"_RSMOTE_KNN", (DL_FUNC) &_RSMOTE_KNN, 3},
    {"_RSMOTE_clusterRD", (DL_FUNC) &_RSMOTE_clusterRD, 1},
    {"_RSMOTE_over_sampling", (DL_FUNC) &_RSMOTE_over_sampling, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_RSMOTE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
